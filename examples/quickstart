#!/usr/bin/env bash

#
# control overwriting influxdb and graphite collectd write configs
# string, "(yes|no)"
#
KEEP_WRITE_CONFIGS="no"

CREATED () { echo ", created."; }
EXISTING () { echo ", using existing."; }
usage () { echo "Usage: $0 (csv|influxdb|graphite)"; }

[ "$#" -ne 1 ] && { usage; exit 1; }
quickstart_type="$1"

function target_config {
    local target_conf="$1"
    local target_ip="$2"
    local create_config=1
    [ -z "$target_conf" ] && { echo "function $FUNCNAME requires the name of the configuration file."; exit 1; }
    [ -z "$target_ip" ] && { echo "function $FUNCNAME requires the ip of the target services."; exit 1; }

    echo -ne "\t$target_conf"
    [[ -f $target_conf  && "${KEEP_WRITE_CONFIGS,,}" == "no" ]] && { echo -n ", removing previous config"; rm $target_conf; }
    if [ ! -f $target_conf ]; then
        [ -f "${target_conf}.example" ] || { echo "Unable to find target configuration example ${target_conf}.example."; exit 1; }
        sed "s/FQDN|IP/$target_ip/" "${target_conf}.example" > $target_conf
        CREATED
    else
        EXISTING
    fi
}

function bootstrap_configs {
    local conf_dir='etc-collectd'
    local conf_file=""

    echo "Bootstrapping configurations:"

    conf_file="${conf_dir}/collectd.conf"
    echo -ne "\t$conf_file"
    if [ ! -f $conf_file ]; then
        [ -f "${conf_file}.example" ] || { echo "Unable to find ${conf_file}.example."; exit 1; }
        sed "s/example.local/$(hostname)/" "${conf_file}.example" > $conf_file
        CREATED
    else
        EXISTING
    fi

    conf_file="${conf_dir}/cadvisor.yaml"
    echo -ne "\t$conf_file"
    if [ ! -f $conf_file ]; then
        [ -f "${conf_file}.example" ] || { echo "Unable to find ${conf_file}.example."; exit 1; }
        cp "${conf_file}.example" $conf_file
        CREATED
    else
        EXISTING
    fi

    conf_file="${conf_dir}/conf.d/cadvisor.conf"
    echo -ne "\t$conf_file"
    if [ ! -f $conf_file ]; then
        # opt for the cadvisor plugin vs the exec version
        local ex_file="${conf_dir}/conf.d/cadvisor-plugin.conf.example"
        [ -f $ex_file ] || { echo "Unable to find ${ex_file}."; exit 1; }
        cp $ex_file $conf_file
        CREATED
    else
        EXISTING
    fi
}

function get_container_state {
    local container_name=$1
    local cur_state=-1
	[ -z "$container_name" ] && { echo "function $FUNCNAME requires the name of a container."; exit 1; }
    cur_state=$(sudo docker inspect -f "{{.State.Running}}" "$container_name" 2> /dev/null)
    [ $? -ne 0 ] && return 2                    # doesn't exist (docker run ...)
    [ "$cur_state" == "false" ] && return 1     # stopped, (docker start ...)
    [ "$cur_state" == "true" ] && return 0      # already running, all good
}

function start_metrics_collection {
    local state=-1

    echo

    get_container_state cadvisor
    state=$?
    if [ $state -gt 0 ]; then
        set -e
        [ $state -eq 2 ] && { echo "Creating CAdvisor container"; sudo docker run --name=cadvisor -v /:/rootfs:ro -v /var/run:/var/run:rw -v /sys:/sys:ro -v /var/lib/docker/:/var/lib/docker:ro -p 8080:8080 -d google/cadvisor:latest; }
        [ $state -eq 1 ] && { echo "Starting CAdvisor container"; sudo docker start cadvisor; }
        set +e
    else
        echo "CAdvisor container is running"
    fi

    echo

    state=-1
    get_container_state collectd
    state=$?
    if [ $state -gt 0 ]; then
        set -e
        [ $state -eq 2 ] && { echo "Creating Collectd container"; sudo docker run --name=collectd -v /home/vagrant/examples/csv:/opt/collectd/csv -v /home/vagrant/examples/etc-collectd:/etc/collectd -v /var/run/docker.sock:/var/run/docker.sock -d maier/cadvisor-collectd:latest; }
        [ $state -eq 1 ] && { echo "Starting Collectd container"; sudo docker start collectd; }
        set +e
    else
        echo "Collectd container is running, restarting to pick up any new configurations."
        set -e
        sudo docker restart collectd
        set +e
    fi

    echo
}


case $quickstart_type in
csv)
	echo -e "\nQuick start example with CSV...\n"

    bootstrap_configs

    config_file='etc-collectd/conf.d/write_csv.conf'
    echo -ne "\t$config_file"
    if [ ! -f $config_file ]; then
        cp "${config_file}.example" $config_file
        CREATED
    else
        EXISTING
    fi

	start_metrics_collection

    echo "Metrics will show up in the csv/ directory. e.g. cd csv/centos7 && ls -l"
	;;
influxdb)
	echo -e "\nQuick start example with InfluxDB...\n"

    bootstrap_configs

    echo
    get_container_state influxdb
    state=$?
    if [ $state -gt 0 ]; then
        set -e
        [ $state -eq 2 ] && { echo "Creating InfluxDB container"; sudo docker run --name=influxdb -v /home/vagrant/examples/influxdb:/config -p 8083:8083 -p 8084:8084 -p 8086:8086 -e PRE_CREATE_DB="collectd;graphite" -d tutum/influxdb:latest; }
        [ $state -eq 1 ] && { echo "Starting InfluxDB container"; sudo docker start influxdb; }
        set +e
        sleep 5
    else
        echo "InfluxDB container is running"
    fi
    echo

    influx_conf='etc-collectd/conf.d/write_network.conf'
    influx_ip=$(sudo docker inspect -f '{{.NetworkSettings.IPAddress}}' influxdb)
    echo "Creating Collectd configuration for InfluxDB listening at ${influx_ip}"
    target_config $influx_conf $influx_ip

    start_metrics_collection

    echo "InfluxDB UI: http://localhost:8083/"
    echo "InfluxDB user: root"
    echo "InfluxDB password: root"
    echo "InfluxDB hostname and port: 127.0.0.1 8086"
    echo "Once you're in, click 'Databases' then 'Explore Data'"
    echo "In the query field, type 'list series' and click the Execute Query button to see all of the metrics"
    echo "Another query for demo purposes: 'select value from /.*\/cadvisor.cpu\/time_ns-total/ limit 30'"
	;;
graphite)
	echo -e "\nQuick start example with Graphite...\n"

    bootstrap_configs

    echo
    get_container_state graphite
    state=$?
    if [ $state -gt 0 ]; then
        set -e
        [ $state -eq 2 ] && { echo "Creating Graphite container"; sudo docker run --name=graphite -v /home/vagrant/examples/graphite/storage-schemas.conf:/var/lib/graphite/conf/storage-schemas.conf -p 8081:80 -d nickstenning/graphite; }
        [ $state -eq 1 ] && { echo "Starting Graphite container"; sudo docker start graphite; }
        set +e
        sleep 5
    else
        echo "Graphite container is running"
    fi
    echo

    graphite_conf='etc-collectd/conf.d/write_graphite.conf'
    graphite_ip=$(sudo docker inspect -f '{{.NetworkSettings.IPAddress}}' graphite)
    echo "Creating Collectd configuration for Graphite listening at ${graphite_ip}"
    target_config $graphite_conf $graphite_ip

	start_metrics_collection

    echo "Graphite UI: http://localhost:8081/"
    echo "Navigate the tree to Graphite.$(hostname) (or the hostname placed in collectd.conf if it was modified)."
	;;
*)
	echo "ERROR: Unknown quick start option: '$1'."
	usage
	exit 1
esac

echo
echo
# END
